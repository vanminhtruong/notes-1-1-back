// Test script ƒë·ªÉ t·∫°o shared notes
// Ch·∫°y: node test-share-note.js

const { sequelize, Note, User, SharedNote } = require('./src/models');

async function createTestSharedNotes() {
  try {
    console.log('üîÑ ƒêang t·∫°o d·ªØ li·ªáu test cho shared notes...');

    // T·∫°o 2 users test n·∫øu ch∆∞a c√≥
    const [user1] = await User.findOrCreate({
      where: { email: 'user1@test.com' },
      defaults: {
        name: 'User 1',
        email: 'user1@test.com',
        password: 'password123',
        isActive: true
      }
    });

    const [user2] = await User.findOrCreate({
      where: { email: 'user2@test.com' },
      defaults: {
        name: 'User 2',
        email: 'user2@test.com',
        password: 'password123',
        isActive: true
      }
    });

    console.log(`‚úÖ Users created: ${user1.name} (ID: ${user1.id}), ${user2.name} (ID: ${user2.id})`);

    // T·∫°o m·ªôt note cho user1
    const note1 = await Note.create({
      title: 'Ghi ch√∫ test chia s·∫ª',
      content: 'ƒê√¢y l√† n·ªôi dung ghi ch√∫ test ƒë·ªÉ chia s·∫ª v·ªõi user kh√°c',
      category: 'test',
      priority: 'medium',
      userId: user1.id
    });

    console.log(`‚úÖ Note created: "${note1.title}" (ID: ${note1.id})`);

    // T·∫°o shared note: user1 chia s·∫ª v·ªõi user2
    const sharedNote = await SharedNote.create({
      noteId: note1.id,
      sharedWithUserId: user2.id,
      sharedByUserId: user1.id,
      canEdit: true,
      canDelete: false,
      message: 'Chia s·∫ª ghi ch√∫ n√†y ƒë·ªÉ c√πng l√†m vi·ªác!',
      isActive: true
    });

    console.log(`‚úÖ Shared note created: ID ${sharedNote.id}`);

    // T·∫°o th√™m m·ªôt note kh√°c v√† share
    const note2 = await Note.create({
      title: 'K·∫ø ho·∫°ch d·ª± √°n',
      content: 'Chi ti·∫øt v·ªÅ k·∫ø ho·∫°ch th·ª±c hi·ªán d·ª± √°n m·ªõi',
      category: 'work',
      priority: 'high',
      userId: user1.id
    });

    const sharedNote2 = await SharedNote.create({
      noteId: note2.id,
      sharedWithUserId: user2.id,
      sharedByUserId: user1.id,
      canEdit: false,
      canDelete: false,
      message: 'Xem v√† g√≥p √Ω cho k·∫ø ho·∫°ch n√†y nh√©!',
      isActive: true
    });

    console.log(`‚úÖ Second shared note created: ID ${sharedNote2.id}`);

    // Hi·ªÉn th·ªã th·ªëng k√™
    const totalSharedNotes = await SharedNote.count({ where: { isActive: true } });
    console.log(`\nüìä T·ªïng c·ªông c√≥ ${totalSharedNotes} shared notes`);
    
    console.log('\nüéâ Ho√†n th√†nh! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ki·ªÉm tra tab "Chia s·∫ª" trong admin panel.');
    console.log('\nüìù D·ªØ li·ªáu test ƒë√£ t·∫°o:');
    console.log(`   ‚Ä¢ ${user1.name} chia s·∫ª "${note1.title}" cho ${user2.name} (c√≥ quy·ªÅn edit)`);
    console.log(`   ‚Ä¢ ${user1.name} chia s·∫ª "${note2.title}" cho ${user2.name} (ch·ªâ xem)`);

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu test:', error);
  } finally {
    await sequelize.close();
    process.exit(0);
  }
}

// Ch·∫°y script
createTestSharedNotes();
